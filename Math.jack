// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: hw09-nscudder/Math.jack
// Implemented by: Nathanael Scudder <nathanael478@gmail.com>
// Last modified: 10:41 AM 4/20/2018

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math 
{
	// Holds values for 2 to the power of the index. (i. e. index 2 is the value of two to the power of two (4))
	static Array powersOfTwo;

	// Saves the value of (2 * quotient * denominator) for recursivelyDivide so that the caluclation does not need to be done with multiplication.
	static int productOfQuotientAndDenominator;
	
    /** 
	 * Performs initial setup for the Math class.
	 *
	 * PRECONDITION: Memory.init() has been invoked.
	 * POSTCONDITON: Initialies powersOfTwo with proper values.
	 *
	 */
    function void init() 
	{
		let powersOfTwo = Array.new(16);
		let powersOfTwo[0] = 1;
		let powersOfTwo[1] = 2;
		let powersOfTwo[2] = 4;
		let powersOfTwo[3] = 8;
		let powersOfTwo[4] = 16;
		let powersOfTwo[5] = 32;
		let powersOfTwo[6] = 64;
		let powersOfTwo[7] = 128;
		let powersOfTwo[8] = 256;
		let powersOfTwo[9] = 512;
		let powersOfTwo[10] = 1024;
		let powersOfTwo[11] = 2048;
		let powersOfTwo[12] = 4096;
		let powersOfTwo[13] = 8192;
		let powersOfTwo[14] = 16384;
		let powersOfTwo[15] = 32767; // one less than 2^15, as we can only express 2^15-1 in 16 bits.
		
		return;
    }
	
	/** 
	 * Returns the absolute value of x.
	 *
	 * PRECONDITION: N/A
	 * POSTCONDITON: If x is less than 0, x negated is returned, else x is returned.
	 *
	 */
    function int abs(int x) 
	{
		if(x < 0)
		{
			return -x;
		}
		else
		{
			return x;
		}
    }
	
	/** 
	 * Returns the product of x and y. 
     * When a Jack compiler detects the multiplication operator '*' in the 
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x*y and multiply(x,y) return the same value.
	 *
	 * PRECONDITION: init() has been invoked.
	 * POSTCONDITON: Returns the int value of x * y.
	 *
	 */
    function int multiply(int x, int y) 
	{
		var Array binaryValueOfY;       // To hold the value of y in binary form.
		var int shiftedX;               // To hold the shifted value of x for each iteration of the loop.
		var int result;                 // To hold the result of the multiplication.
		var int iterationCounter;       // Counter for the loop.
		var boolean hasNegativeProduct; // To hold whether the multiplication of x and y has a negative product.
		
		// If either x or y are 0, return 0, as anything multiplied by 0 is 0.
		if((x = 0) | (y = 0))
		{
			return 0;
		}
		
		// If x or y are equal to 1, return y or x respectively, as anything multiplied by 1 is itself.
		if(x = 1)
		{
			return y;
		}
		
		if(y = 1)
		{
			return x;
		}
		
		// If x or y are equal to 2, return (y + y) or (x + x) respectively, as anything multiplied by 2 is itself plus itself. 
		if(x = 2)
		{
			return y + y;
		}
		
		if(y = 2)
		{
			return x + x;
		}
		
		// If x or y are negative, but not both (XOR), set hasNegativeProduct to true.
		if(((x < 0) & (~(y < 0))) | ((~(x < 0)) & (y < 0)))
		{
			let hasNegativeProduct = true;
		}
		else
		{
			let hasNegativeProduct = false;
		}
		
		// Get the binary value of y and store it.
		let binaryValueOfY = Array.new(15);
		do Math.getBinaryValue(binaryValueOfY, Math.abs(y));

		
		let shiftedX = Math.abs(x);
		let result = 0;
		let iterationCounter = 14; // least significant bit starts at index 14
		
		// Loop for each bit in y.
		while(iterationCounter > -1)
		{
			// If the current bit in y is equal to 1, add shiftedX to result.
			if(binaryValueOfY[iterationCounter] = 1)
			{
				let result = result + shiftedX;
			}
			
			// Shift shiftedX by adding it to itself.
			let shiftedX = shiftedX + shiftedX;
			
			let iterationCounter = iterationCounter - 1;
		}
		
		// If the product should be negative, negate result.
		if(hasNegativeProduct)
		{
			let result = -result;
		}
		
		do binaryValueOfY.dispose();
		
		return result;
    }
	
	/** 
	 * Returns the integer part of x/y.
     * When a Jack compiler detects the multiplication operator '/' in the 
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x/y and divide(x,y) return the same value.
	 *
	 * PRECONDITION: init() has been invoked.
	 * POSTCONDITON: Returns the int value of x / y.
	 * (WRAPPER METHOD)
	 */
    function int divide(int x, int y) 
	{
		var int numerator;         // To hold the absolute value of x, the numerator in the division.
		var int denominator;       // To hold the absolute value of y, the denominator in the divison.
		
		// Get the absolute values.
		let numerator = Math.abs(x);
		let denominator = Math.abs(y);
		
		// If the numerator and denominator are equal, (i. e. 2 / 2) the result will always be 1.
		if(denominator = numerator)
		{
			return 1;
		}
		
		// To hold some math for the recursive method so that it does not need to be recalculated. 
		// (Will hold the current value of 2 * quotient * denominator)
		let productOfQuotientAndDenominator = 0;
		
		// If x or y are negative, but not both (XOR), negate the result.
		if(((x < 0) & (~(y < 0))) | ((~(x < 0)) & (y < 0)))
		{
			return -Math.recursivelyDivide(numerator, denominator);
		}
		else
		{
			return Math.recursivelyDivide(numerator, denominator);
		}
    }
	
	/** 
	 * Recursive method to be used by divide() to calculate the quotient of numerator
     * and denominator recursively.
	 *
	 * PRECONDITION: init() has been invoked.
	 * POSTCONDITON: Returns the int value of numerator / denominator.
	 *
	 */
	function int recursivelyDivide(int numerator, int denominator)
	{
		var int quotient; // To hold the quotient at this stage.
		
		// (BASE CASE) If the denominator is greater than the numerator, (i. e. 5 / 50) due to
		// integer divison, the result will always be 0. Also runs for if denominator is less than 0,
		// in case of overflow.
		if((denominator > numerator) | (denominator < 0))
		{
			let productOfQuotientAndDenominator = 0; // 2 * quotient * denominator starts at 0.
			return 0;
		}
		
		// Recursively get the quotient for numerator, and a denominator that has been multipled by 2.
		let quotient = Math.recursivelyDivide(numerator, (denominator + denominator));
		
		// If denominator does not go into numerator at this stage, return quotient times 2, 
		// otherwise return quotient times 2 plus 1.
		if((numerator - (productOfQuotientAndDenominator)) < denominator)
		{
			return (quotient + quotient);
		}
		else
		{
			// Now that quotient has increased, (2 * quotient * denominator) increases by denominator.
			let productOfQuotientAndDenominator = productOfQuotientAndDenominator + denominator; 
			
			return (quotient + quotient) + 1;
		}
	}

	/** 
	 * Returns the integer part of the square root of x.
	 *
	 * PRECONDITION: init() has been invoked.
	 * POSTCONDITON: Returns the integer part of the square root of x.
	 *
	 */
    function int sqrt(int x) 
	{
		var int result;                 // To hold the result of the binary search for the square root of x.
		var int iterationCounter;       // To hold the iteration counter for the loop.
		var int comparisonValue;        // To hold The value to compare to x to see if the loop is getting close to the square root.
		var int comparisonValueSquared; // To hold the squared value of comparisonValue;
		
		// If x is not greater than 0, return 0.
		if(~(x > 0))
		{
			return 0;
		}
		
		let result = 0;
		
		// Start the search at 2 to the seventh power.
		let iterationCounter = 7;
		
		// Loop 7 times.
		while(iterationCounter > -1)
		{
			// Get the comparison value for this iteration, which will be compared to x to see if the loop is approaching the square root.
			let comparisonValue = result + powersOfTwo[iterationCounter];
			let comparisonValueSquared = comparisonValue * comparisonValue;
			
			// If the compairson value squared is not greater than x, and is not less than 0, set result to the compairson value.
			if((~((comparisonValueSquared) > x)) &
			   (~((comparisonValueSquared) < 0)))
			{
				let result = comparisonValue;
			}
			
			let iterationCounter = iterationCounter - 1;
		}
		
		return result;
    }
	
	/** 
	 * Returns the greater number.
	 *
	 * PRECONDITION: N/A
	 * POSTCONDITON: If a is greater than b, a is returned, otherwise b is returned.
	 *
	 */
    function int max(int a, int b) 
	{
		if(a > b)
		{
			return a;
		}
		else
		{
			return b;
		}
    }
	
	/** 
	 * Returns the smaller number. 
	 *
	 * PRECONDITION: N/A
	 * POSTCONDITON: If a is less than b, a is returned, otherwise b is returned.
	 *
	 */
    function int min(int a, int b) 
	{
		if(a < b)
		{
			return a;
		}
		else
		{
			return b;
		}
    }
	
	/**
	 *  Translates the specified decimal value into a binary representation and stores it in
     *	the specified array. Index 0 in the translated array is the most significant digit
     *  of the binary number, index 14 is the least significant number.
	 *
	 *
	 * PRECONDITION: init() has been invoked.
	 * POSTCONDITION: Returns a binary representation of the specified decimal value.
	 *
	 */
	function void getBinaryValue(Array container, int decimalValue)
	{
		var int valueLeft;    // To hold the value as its translated.
		var int powerCounter; // To hold the factor of two the current digit represents.
		var int bitCounter;   // To keep track of the position in which to put the next bit in the container.
		
		let valueLeft = decimalValue;
		let powerCounter = 14;
		let bitCounter = 0;
		
		// Loop until all factors of two have been processed for the binary number.
		while(powerCounter > -1)
		{
			// If valueLeft is greater than or equal to the power of two corresponding 
			// to the current powerCounter, set the current bit in container to 1,
			// then remove the corresponding factor of two from valueLeft.
			if((valueLeft > powersOfTwo[powerCounter]) | (valueLeft = powersOfTwo[powerCounter]))
			{
				let container[bitCounter] = 1;
				let valueLeft = valueLeft - powersOfTwo[powerCounter];
			}
			// Else set the current bit to 0.
			else
			{
				let container[bitCounter] = 0;
			}
			
			let powerCounter = powerCounter - 1;
			let bitCounter = bitCounter + 1;
		}
		
		return;
	}
}
